环境变量的设置的注意点：

    A：建环境变量必须是系统变量。

    B：%%：表示在一个环境变量中调用另一个环境变量。
	%Java_Home%\bin


Path：系统用于搜索可执行文件的路径。
classpath：java虚拟机用于搜索类文件的路径。

标识符的命名

1：见名知义

2：要有驼峰标识，对多个单词进行大小写的间隔
	
	类首字母大写

	方法首字母小写

	变量的首字母小写

	常量全大写。

字符集：
	ASCII码
	ISO-8859-1(Latin-1)
		-2(Latin-2)
		-3(Latin-3)
		...
	
	gb2312(GBK)
	
	Unicode字符集
		UTF-8(传输速度比UTF-16在网络比较快。)
		UTF-16
	在Unicode字符集中，一个字符占2个字节(16位)。
	一个字节占8个bit位
	

关键字
	关键字：很多，此处省略
	
	保留字：保留在那边，现在不用，以后可能会用,但是我们开发人员不能拿来用。
	如const,goto


定义常量
	常量就是一个保持不变的值。如何8,9.7,true,'A',字符串:"我是谁";
	在Java中，常量使用final进行修饰。
	final int MAX = 10;

定义变量：
	变量在程序执行过程中，值可能会发生变化。

数据类型：基本数据类型和复合数据类型

========八种基本数据类型重点掌握====================
	类型	字节数		比特位	对应值范围
	byte	1		8	-128--127
	short	2		16	-2^15--2^15-1
	int     4		32	-2^31--2^31-1
	long	8		64	-2^63--2^63-1
	float	4		32	-10^-38 -- 10^-38 -- 10^38 如99.88f/99.77F
	double	8		64	-10^-308 -- 10^-308 -- 10^308
	char	2		16	0--65535   	如'A','我'
	boolean	1		8	true,false

数据类型之间的转换

	A：隐式转化
		系统会自动去转。
		从低的字节数往高的字节数转换

		注意点：
		1)：boolean类型不参与任何类型的转换
		2)：char表示的范围比short来的大。因为short
		可以是有符号的。而char都是无符号的。

	B：强制转化。

		由高字节数往低字节数进行转换时，要进行强制转换。会损失精度值。

===============(了解)在JAVA中，有六个不同的地方可以存储数据：=============

1. 寄存器（register）。这是最快的存储区，因为它位于不同于其他存储区的地方――处理器内部。但是寄存器的数量极其有限，所以寄存器由编译器根据需求进行分配。你不能直接控制，也不能在程序中感觉到寄存器存在的任何迹象。

2. 堆栈（stack）。位于通用RAM中，但通过它的“堆栈指针”可以从处理器哪里获得支持。堆栈指针若向下移动，则分配新的内存；若向上移动，则释放那些内存。这是一种快速有效的分配存储方法，仅次于寄存器。创建程序时候，JAVA编译器必须知道存储在堆栈内所有数据的确切大小和生命周期，因为它必须生成相应的代码，以便上下移动堆栈指针。这一约束限制了程序的灵活性，所以虽然某些JAVA数据存储在堆栈中――特别是对象引用，但是JAVA对象不存储其中。

3. 堆（heap）。一种通用性的内存池（也存在于RAM中），用于存放所以的JAVA对象。堆不同于堆栈的好处是：编译器不需要知道要从堆里分配多少存储区域，也不必知道存储的数据在堆里存活多长时间。因此，在堆里分配存储有很大的灵活性。当你需要创建一个对象的时候，只需要new写一行简单的代码，当执行这行代码时，会自动在堆里进行存储分配。当然，为这种灵活性必须要付出相应的代码。用堆进行存储分配比用堆栈进行存储存储需要更多的时间。

4. 静态存储（static storage）。这里的“静态”是指“在固定的位置”。静态存储里存放程序运行时一直存在的数据。你可用关键字static来标识一个对象的特定元素是静态的，但JAVA对象本身从来不会存放在静态存储空间里。

5. 常量存储（constant storage）。常量值通常直接存放在程序代码内部，这样做是安全的，因为它们永远不会被改变。有时，在嵌入式系统中，常量本身会和其他部分分割离开，所以在这种情况下，可以选择将其放在ROM中

6. 非RAM存储。如果数据完全存活于程序之外，那么它可以不受程序的任何控制，在程序没有运行时也可以存在。

=================运算符和表达式=============================

1:表达式的概念
	将运算符和操作数组合成的符合Java规则的式子，称为表达式。

2：表达式的分类：
	按照操作数的数量分为：

	一元(单目)：只有一个操作。

		    int i = +10;

		    int j = -2;

		    int k = i++

		    int L= j--;
	二元(双目)
		    int i = a * b;
			    

			    a > b;
	三元。
		    int c = a>b?a:b;



3：运算符的分类：

	A：括号运算符

	B：算术运算符

	C：关系运算符

	D：逻辑运算符

	E：位运算符

	F：赋值运算符
	
	G：条件运算符

	H：逗号运算符

	I：其它运算符



括号运算符

算术运算符
	一元
	二元
	
	优先级：一元运算符大于二元运算符。

	表达式计算的结合方向：从左向右。

	注意点：算术运算的返回值都是整型，
	
	如果想返回其它数据类型的，
	
		A:转换转换。

		B：低位数据向高位隐式转换

		System.out.println(3/2)      //1
		System.out.println((double)3/2);	//1.5
		System.out.println(3/2.0);		//1.5

关系运算符
	>	a>b	如果a>b，返回true
	>=	a>=b	如果a>=b，返回true
	<	a<b	如果a<b，返回true
	<=	a<=b	如果a<=b，返回true
	==	a==b	如果a==b，返回true
	!=	a!=b	如果a!=b，返回true

	
	结合方向：从左向右

	关系运算符的优先级：>,>=,<,<=的优先级比==和!=来的得高。

逻辑运算符
	
	!	!a	逻辑非运算
	&&	a&&b	逻辑与运算(并且)
	||	a||b	逻辑或运算(或者)

	返回结果：true和false

	结合方向：从左向右

	优先级：！优先于&&和||

	注意点：会发生短路对象，部分表达式不参加运算。
	int a=1,b=2,c=3;

	if( a>2 && (b++)>0 ){
	}
	System.out.println(b)//2，
	//要求的是逻辑与。(两个条件都要成立)由于a>2，条件已经不成立。后面就没有
	//计算的必要。因为b没有做++的操作。所以b的结果还是2.

	if( a>0 || (c--)>0){
	}
	System.out.println(c);
	//要求的是逻辑非，只要满足一个条件即可，由于a>0成立，所以后面就没有计算的
	//必机。所以c没有--的操作，c的结果还是3.
& | 不考虑短路 都要执行两遍的表达式 与  或

位运算符
	~	~a	按位取反	单目
	&	a&b	按位与		双目
	|	a|b	按位或		双目
	^	a^b	按位异或	双目
	>>	a>>n	右移n位		双目
	>>>	a>>>n	无符号右移n位	双目
	<<	a<<n	左移n位		双目

&:如果两个操作数的相应位均为 1，则该位的结果值为 1
	1100
	&
	1010

	1000

|：如果两个操作数的相应位有一个为 1，则该位的结果值为 1 
	1100
	|
	1010

	1110

^：如果参加运算的两个操作数的相应位同号，则结果为 0，异号则为 1
	1100
	^
	1010

	0110

<<	a<<n	左移n位

	左端（高位）移出部分舍弃，右端（低位）补0	

	12	0000 1100 
	    
	12<<2	00110000


>>     a>>n	右移n位
	右端（低位）移出部分舍弃，左端（高位）根据符号位补0或者1，
	无符号或正数补0，负数补1
	
	12	0000 1100 

	12>>2   000000 11


>>>	a>>>n	无符号右移n位

	右端(低位)移出部分舍弃，左端(高位)全部都是补0(不管是正数还是负数)

	
赋值运算符：
运算符	用法	等效表达式
+=	a+=b	a = a + b		//a = +b;将一个正数b赋给a.
-=	a-=b	a = a - b
*=	a*=b	a = a * b
/=	a/=b	a = a / b
%=	a%=b	a = a % b
&=	a&=b	a = a & b
|=	a|=b	a = a | b
^=	a^=b	a = a ^ b
>>=	a>>=2	a = a >> 2
>>>=	a>>>=2	a = a >>> 2
<<=	a<<=2	a = a << 2

条件运算符(三元运算符)

	int c = a>b?a:b;

	计算a>b的结果，如果为真，返回a,否则返回b,
	将结果赋给c。


逗号运算符(待试验)

	if (a=4,5>3,a=2*4){
		System.out.println("test");
	}
	只计算最后一次逗号运算的结果，所以a=8.

其它运算符
	.		调用类的静态变量和常量。对象的属性	
	new		实例化一个对象。对象分配到内存的堆区中。
	()		调用类的静态方式，对象的方法。改变运算符的优先级	
	[]		数组，通过下标号来获取数组中的元素 
	instanceof	判断一个对象是否一个类的实例。

运算符的优先级

()--->一元运算符-->二元运算符--->三元运算符--->赋值运算值。

		  算术运算符>关系运算符>逻辑运算符


